Insertion Sort Steps:
Initial array:
[22, 27, 16, 2, 18, 6]

Step 1: The first element (22) is already considered sorted, so no changes are made:
[22, 27, 16, 2, 18, 6]

Step 2: Compare 27 with 22. Since 27 is greater than 22, no changes are made:
[22, 27, 16, 2, 18, 6]

Step 3: Compare 16 with 27. Since 16 is smaller, swap them. Then compare 16 with 22 and swap them:
[16, 22, 27, 2, 18, 6]

Step 4: Compare 2 with 27 and swap them. Compare 2 with 22 and swap them. Compare 2 with 16 and swap them:
[2, 16, 22, 27, 18, 6]

Step 5: Compare 18 with 27 and swap them. Compare 18 with 22 and swap them:
[2, 16, 18, 22, 27, 6]

Step 6: Compare 6 with 27 and swap them. Compare 6 with 22 and swap them. Compare 6 with 18 and swap them. Compare 6 with 16 and swap them:
[2, 6, 16, 18, 22, 27]

Big-O Notation:
The time complexity for Insertion Sort is as follows:

Best case: O(n) (happens when the array is already sorted)
Average case: O(n²)
Worst case: O(n²) (happens when the array is in reverse order)
Where does the number 18 fit in terms of time complexity?
In the sorted array [2, 6, 16, 18, 22, 27], the number 18 is in the middle, so it fits the average case scenario.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Selection Sort Steps (First 4 Steps):
Initial array:
[7, 3, 5, 8, 2, 9, 4, 15, 6]

Step 1: Find the smallest element (2) and swap it with 7:
[2, 3, 5, 8, 7, 9, 4, 15, 6]

Step 2: The next smallest element (3) is already in its correct place, so no changes are made:
[2, 3, 5, 8, 7, 9, 4, 15, 6]

Step 3: Find the next smallest element (4) and swap it with 5:
[2, 3, 4, 8, 7, 9, 5, 15, 6]

Step 4: Find the next smallest element (5) and swap it with 8:
[2, 3, 4, 5, 7, 9, 8, 15, 6]
